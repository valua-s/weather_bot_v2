from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from create_bot import logger
from db_handler.db_users import (Schedule_url, create, delete,
                                 get_all_elements_for_user, get_element)
from handlers.start import cmd_come_back
from keyboards.all_keyboards import (create_data_correct_kb,
                                     create_delete_confirm_kb,
                                     create_delete_kb, create_final_changes_kb,
                                     create_geo_kb, create_one_more_kb,
                                     create_period_kb, create_unsub_kb,
                                     create_yes_no_city_kb,
                                     create_yes_no_data_kb, main_kb)
from utils.my_utils import (create_error_message, create_table_forcasts,
                            create_time_zone, create_url, get_adress, is_float)

subscribe_on_router = Router()


class Form(StatesGroup):
    lat = State()
    lon = State()
    period = State()
    schedule = State()
    city = State()
    data_forcasts = State()
    data_delete = State()


@subscribe_on_router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
@subscribe_on_router.message(Command('backhome'))
async def to_home(message: Message):
    await cmd_come_back(message)


async def cmd_ask_location(message: Message, state: FSMContext):
    await message.answer(
        '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –õ–æ–∫–∞—Ü–∏–∏',
        reply_markup=create_geo_kb()
        )


@subscribe_on_router.message(F.text == '‚òÄÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑')
@subscribe_on_router.message(Command('forcast'))
@subscribe_on_router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
async def insert_location(message: Message, state: FSMContext):
    await cmd_ask_location(message, state)
    await state.set_state(Form.lat)


@subscribe_on_router.message(F.location)
async def cmd_ask_city(message: Message, state: FSMContext):
    lat = message.location.latitude
    await state.update_data(lat=lat)
    lon = message.location.longitude
    await state.update_data(lon=lon)
    await create_adress_message(lat, lon, message, state)


async def create_adress_message(lat, lon, message: Message,
                                state: FSMContext):
    try:
        data = await state.get_data()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ state: {e}')
        await create_error_message(message)
    location_city = get_adress(lat, lon)
    await state.update_data(city=location_city)
    if "–û—à–∏–±–∫–∞" not in location_city:
        await message.answer(
            f'–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥. –≠—Ç–æ {location_city}?',
            reply_markup=create_yes_no_city_kb()
        )
        if not data.get('schedule'):
            await state.set_state(Form.period)
        else:
            await state.set_state(Form.schedule)
    else:
        text = ('–ï—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –í–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏,\n'
                '—Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é?')
        await message.answer(text, reply_markup=create_yes_no_data_kb())


@subscribe_on_router.message(F.text == 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é')
@subscribe_on_router.message(F.text == '–î–∞, —è –ø–µ—Ä–µ–¥–∞–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é')
@subscribe_on_router.message(F.text == ("–ù–µ—Ç, –º–æ–π –≥–æ—Ä–æ–¥ –¥—Ä—É–≥–æ–π, —è –ø–µ—Ä–µ–¥–∞–º "
                             "–ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑"))
async def cmd_ask_lat_city(message: Message, state: FSMContext):
    await state.set_state(Form.lat)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É:')


@subscribe_on_router.message(F.text, Form.lon)
async def cmd_ask_manualy_input_city(message: Message, state: FSMContext):
    lon = is_float(message.text)
    if lon:
        await state.update_data(lon=lon)
        data = await state.get_data()
        lat = data.get('lat')
        await create_adress_message(lat, lon, message, state)


@subscribe_on_router.message(F.text, Form.lat)
async def cmd_ask_lon_city(message: Message, state: FSMContext):
    lat = is_float(message.text)
    if lat:
        await state.update_data(lat=lat)
        await state.set_state(Form.lon)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É:')
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã,'
                             '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é'
                             '—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é  üëá')
        await cmd_ask_lat_city(message, state)


@subscribe_on_router.message(F.text == "–î–∞, —ç—Ç–æ —Ç–∞–∫", Form.period)
@subscribe_on_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞")
async def choose_period(message: Message, state: FSMContext):
    await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏',
            reply_markup=create_period_kb()
        )


@subscribe_on_router.message(F.text == "–î–∞, —ç—Ç–æ —Ç–∞–∫", Form.schedule)
async def return_to_summary(message: Message, state: State):
    data = await state.get_data()
    await show_summary(message, data)


@subscribe_on_router.message(F.text == '–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã')
async def install_period_current(message: Message, state: FSMContext):
    await state.update_data(period='hourly')
    schedule = await state.get_data()
    if not schedule.get('schedule'):
        await choose_time(message=message, state=state)
    else:
        await return_to_summary(message, state)


@subscribe_on_router.message(F.text == "–ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑")
async def install_period_daily(message: Message, state: FSMContext):
    await state.update_data(period='daily')
    schedule = await state.get_data()
    if not schedule.get('schedule'):
        await choose_time(message=message, state=state)
    else:
        await return_to_summary(message, state)


@subscribe_on_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def choose_time(message: Message, state: FSMContext):
    await state.set_state(Form.schedule)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n'
        '(–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)')


@subscribe_on_router.message(F.text.contains(':'),
                             Form.schedule)
async def form_information(message: Message, state: FSMContext):
    if message.text.__contains__(':'):
        data = await state.update_data(schedule=message.text)
    else:
        data = await state.get_data()
    await show_summary(message=message, data=data)


@subscribe_on_router.message(F.text.regexp(r"^(\d+).*"), Form.schedule)
@subscribe_on_router.message(F.text.regexp(r"^(\d+).*"), Form.period)
async def error_time_information(message: Message, state: FSMContext):
    await message.answer(
        '–ù–µ —Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç, –¥—Ä—É–≥ –º–æ–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É \n'
        '–∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ–º–∞–Ω–¥–æ–π')
    await choose_time(message, state)


@subscribe_on_router.message(F.text == "–î—É–º–∞—é, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É –º–µ–Ω—è—Ç—å")
async def nothing_to_change(message: Message, state: FSMContext):
    await message.answer(
        '–í–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Ä–∞–∑ —É–∂ —Ä–µ—à–∏–ª–∏ \n'
        '—Ç–æ –Ω–∞–¥–æ –∏–¥—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ üí™üèª')
    await form_information(message, state)


async def show_summary(message: Message, data):
    period = data.get('period')
    schedule = data.get('schedule')
    adress = data.get('city')
    if period == 'daily':
        period = '–∫—Ä–∞—Ç–∫–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ'
    else:
        period = '–ø–æ–¥—Ä–æ–±–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã'
    text = (
        f'–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n'
        f'–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule}\n'
        f'–æ {period} –≤ –≥–æ—Ä–æ–¥–µ {adress}\n'
        f'–í—Å–µ –≤–µ—Ä–Ω–æ?\n'
    )
    await message.answer(text, reply_markup=create_data_correct_kb())


async def create_data_from_state(message, state):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ë–î."""
    data = await state.get_data()
    lat = data.get('lat')
    lon = data.get('lon')
    user_telegram_id = message.from_user.id
    url = create_url(lat, lon, data.get('period'))
    time_zone = create_time_zone(lat, lon)
    city = data.get('city')
    schedule_url_data = {
        'user_telegram_id': user_telegram_id,
        'url': url,
        'time_zone': time_zone,
        'schedule_time': data.get('schedule'),
        'city': city
    }
    return schedule_url_data


@subscribe_on_router.message(F.text == "–î–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã",
                             Form.schedule)
@subscribe_on_router.message(F.text == "–î–∞, —è —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω",
                             Form.schedule)
async def create_schedule(message: Message, state: FSMContext):
    schedule_url_data = await create_data_from_state(message, state)
    await message.answer(
                '–î—Ä—É–≥ –º–æ–π, —Å–æ–∑–¥–∞—é –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–≥–Ω–æ–∑, –æ–∂–∏–¥–∞–π –º–∏–Ω—É—Ç–∫—É!'
            )
    try:
        result = await get_element(Schedule_url, message.from_user.id)
        if not result or message.text == "–î–∞, —è —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω":
            await create(Schedule_url, schedule_url_data)
            await message.answer(
                '–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∂–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞!',
                reply_markup=main_kb(message.from_user.id)
            )
            await state.clear()
        else:
            await message.answer(
                '–î–ª—è –í–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑, —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω?',
                reply_markup=create_one_more_kb()
            )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}')
        await create_error_message(message)


@subscribe_on_router.message(F.text == "–ù–µ—Ç, —è —Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                             Form.schedule)
async def create_change_schedule(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É —à–∞–≥—É –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                         reply_markup=create_final_changes_kb())


@subscribe_on_router.message(F.text == 'üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑')
@subscribe_on_router.message(Command('cancel'))
async def cmd_cancel(message: Message):
    await message.answer(
        '–û—á–µ–Ω—å –∂–∞–ª—å –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ü§∑',
        reply_markup=create_unsub_kb()
        )


@subscribe_on_router.message(F.text == '–Ø —Ö–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑')
async def cmd_cancel_conf(message: Message, state: FSMContext):
    await message.answer('–î—Ä—É–≥ –º–æ–π, –º–∏–Ω—É—Ç–∫—É, —è –∏—â—É —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
    try:
        forcasts = await get_all_elements_for_user(
            Schedule_url, message.from_user.id)
        if forcasts:
            count = len(forcasts)
            await message.answer('–î—Ä—É–≥ –º–æ–π, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                 reply_markup=create_delete_kb(count))
            data = {}
            for i in range(count):
                data[i] = [forcasts[i].url, forcasts[i].schedule_time,
                           forcasts[i].city]
            await state.update_data(data_forcasts=data)
            await state.set_state(Form.data_forcasts)
            await message.answer(create_table_forcasts(data))
    except Exception as e:
        logger.error(e)
        await message.answer('–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø—Ä–æ–Ω–æ–∑',
                             reply_markup=main_kb(message.from_user.id))


@subscribe_on_router.message(F.text.regexp(r"[0-9]"),
                             Form.data_forcasts)
async def delete_this_question(message: Message, state: FSMContext):
    num_of_forcast = int(message.text)
    data = await state.get_data()
    forcast_info = data.get('data_forcasts')[num_of_forcast-1]
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:')
    await message.answer(create_table_forcasts(forcast_info),
                         reply_markup=create_delete_confirm_kb())
    await state.update_data(data_delete=forcast_info)
    await state.set_state(Form.data_delete)


@subscribe_on_router.message(F.text == '–î–∞, –ø—É—Å—Ç—å –≥–æ—Ä–∏—Ç —Å–∏–Ω–∏–º –ø–ª–∞–º–µ–Ω–µ–º',
                             Form.data_delete)
async def delete_this_action(message: Message, state: FSMContext):
    await message.answer('–ú–∏–Ω—É—Ç–∫—É –æ–∂–∏–¥–∞–Ω–∏—è, —Å–∂–∏–≥–∞—é –≤—Å–µ –º–æ—Å—Ç—ã')
    data = await state.get_data()
    data_delete = data.get('data_delete')
    try:
        await delete(Schedule_url, message.from_user.id,
                     data_delete[0])
    except Exception as e:
        logger.error(e)
        await message.answer('–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø—Ä–æ–Ω–æ–∑',
                             reply_markup=main_kb(message.from_user.id))
    else:
        await message.answer('–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                             reply_markup=main_kb(message.from_user.id))


@subscribe_on_router.message(F.text == '–ù–µ—Ç, —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å',
                             Form.data_delete)
async def to_main(message: Message, state: FSMContext):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –¥—Ä—É–≥ –º–æ–π, –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await cmd_come_back(message)


@subscribe_on_router.message(F.text.regexp(r"[^0-9]"))
async def universal_answer(message: Message):
    await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–Ω–µ –∫–æ–º–∞–Ω–¥–∞, '
                         '—è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üôÄ '
                         '–Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç—Ç–æ –º–æ–µ–º—É —Ö–æ–∑—è–∏–Ω—É')
